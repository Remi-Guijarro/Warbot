;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; le code de l'equipe rouge basique
;; préfixe : red-team
;;
;; mem0 et mem1 : coordonnees d'une cible
;; mem5 : indique si le robot a ou non une cible sélectionnée
;; mem4 : indique si un harvester est en mode retour à la base
;; mem6 : le nb de harvesters à créer
;; mem7 : le nb de rocket-launchers à créer
;; mem8 : le nb d'explorers à créer
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to red-team-ask-for-energy [ b n ]
  ask b [ if (energy > 6000) [ give-energy myself n ]]
end

to red-team-go-back-to-base
  if (carrying-food? > 500) or (energy < 500) or ((Breed = RocketLaunchers) and (nb-missiles = 0))
  [
    let b min-one-of my-bases [ distance myself ]
    if (b != nobody) [
      ifelse (distance b <= 2)
      [ ;;  ask for/give resources 
        if (carrying-food? > 1000) [ give-food b carrying-food? ]
        if (energy < 500) [ red-team-ask-for-energy b 500 ]
        if ((Breed = RocketLaunchers) and (nb-missiles = 0)) [
          red-team-ask-for-energy b 500
          new-missile 7
        ]
        set mem4 0
      ]
      [ ;;  head to base 
        set heading towards b - 20 + random 40
        if count turtles in-cone 2 90 with [ (breed != Burgers) and (breed != Perceptions) ] != 1 [ rt random 90 ]
        forward-move speed
      ]
    ]    
  ]
end

to red-team-go-and-eat
  if ((breed = RocketLaunchers and (mem5 = 0)) or (breed = Explorers)) [
    random-move
  ]
end

to red-team-harvesters-go-and-eat
  let b min-one-of perceive-food [ distance self ]
  ifelse (b != nobody) [ 
    ifelse (distance b) <= 2
      [ take-food b ]
      [ set heading towards b - 20 + random 40
        if count turtles in-cone 2 90 with [ (breed != Burgers) and (breed != Perceptions) ] != 1 [ rt random 90 ]
        forward-move speed
      ]
  ]
  [ random-move ]
end

to-report red-team-no-target?
  report mem5 = 0
end

to red-team-set-target [ x y espece ]
  set mem0 x set mem1 y set mem2 espece set mem5 1
end

to red-team-call-rocket-launcher [ x y espece ]
  let rl min-one-of perceive-specific-robots color RocketLaunchers [ distancexy x y ]
  if (rl != nobody) [ ask rl [ red-team-set-target x y espece ]]
end

to red-team-call-explorer [ x y espece ]
  let ex one-of perceive-specific-robots color Explorers
  if (ex != nobody) [
    ask ex [
      set mem0 x 
      set mem1 y
      set mem2 espece
      set mem5 1
    ]
  ]
end

to red-team-select-target
  if (red-team-no-target?)
  [
    let h min-one-of perceive-robots ennemy [ distance myself ]
    ifelse ( h != nobody ) [
      set mem0 [xcor] of h
      set mem1 [ycor] of h
      set mem2 [breed] of h
      set mem5 1
    ]
    [ set mem5 0 ]
  ]
end

to red-team-shoot 
  if (not red-team-no-target?) 
  [
    ifelse (distancexy mem0 mem1 < detection-range)
    [ launch-rocket towardsxy mem0 mem1 set mem5 0]
    [ set heading towardsxy mem0 mem1 - 20 + random 40
      if count turtles in-cone 2 90 with [ (breed != Burgers) and (breed != Perceptions) ] != 1 [ rt random 90 ]
      forward-move speed
    ]
  ]
  
end

to goRedExplorer
  red-team-go-back-to-base
  red-team-go-and-eat

  ifelse (not red-team-no-target?) [
    red-team-call-rocket-launcher mem0 mem1 mem2
    red-team-call-explorer mem0 mem1 mem2
  ]
  [ let h one-of perceive-robots ennemy
    if ( h != nobody ) [ red-team-call-rocket-launcher [xcor] of h [ycor] of h [breed] of h]
  ]
end

to goRedRocketLauncher
  red-team-go-back-to-base
  red-team-select-target
  ;; si pas de cible, cherche à manger
  ifelse (red-team-no-target?) [ red-team-go-and-eat ]
  [red-team-shoot] ;; sinon tire
  
  if ((energy > 3000) and (nb-missiles < 6)) [ new-missile 1 ]
end

to goRedHarvester
  ;; rentre à la base si certaines conditions sont vérifiées
  ;;red-team-go-back-to-base
  ;; cherche à manger
  ;;red-team-harvesters-go-and-eat
  ;;plant-seeds color max-seeds
  
  let f min-one-of perceive-food [ distance myself ]
  while [(f != nobody) and (distance f <= 2)] [
    take-food f
    set f min-one-of perceive-food [ distance myself ]
  ]

  ifelse (mem4 = 1) or (carrying-food? > 500) or (energy < 100)
  [
    ; retour à la base
    set mem4 1
    ;; rentre à la base si certaines conditions sont vérifiées
    red-team-go-back-to-base
    if (energy > 100) and (carrying-food? > 100) [ 
      ;; détermine la distance de la base la plus proche
      let b min-one-of my-bases [ distance myself ]
      if (b != nobody) [
        ;; si le robot est à moins de 30 de la base
        if (distance b < 10)
          [ plant-seeds color max-seeds ]
      ]
    ]
  ]
  [
    ;; cherche à manger
    red-team-harvesters-go-and-eat
  ]
end

to goRedBase
  set label energy
  ;; crée un nouveau robot si il reste des demandes de création dans le pipe (mem6, mem7 ou mem8)
  ifelse (mem7 > 0) [ new-RocketLauncher self set mem7 mem7 - 1 ]
  [ ifelse (mem6 > 0) [ new-Harvester  self set mem6 mem6 - 1 ]
  [ if (mem8 > 0) [ new-Explorer self set mem8 mem8 - 1 ]]]
  
  if (nb-missiles < 10) and (energy > 1000) [ new-missile 50 ]
  if (nb-fafs < 10) and (energy > 1000) [ new-faf 10 ]
  if (energy > 12000) [ ifelse (random 2 = 0) [ set mem8 mem8 + 1 ][ifelse (random 4 = 0) [ set mem7 mem7 + 1 ][ set mem6 mem6 + 1 ]]]
  
  ;; detect enemies of all type
  let r one-of perceive-specific-robots ennemy rocketlaunchers
  let h one-of perceive-specific-robots ennemy harvesters
  let ex one-of perceive-specific-robots ennemy explorers
 
  ifelse r != nobody
  [ launch-rocket towards r ] 
  [ ifelse h != nobody 
    [ launch-rocket towards h ] 
    [if ex != nobody 
      [launch-rocket towards ex] 
    ]
  ]
end

;; procedure pour initialiser les explorers rouges
to initRedExplorer
end

;; procedure pour initialiser les rocket-launchers rouges
to initRedRocketLauncher
end

;; procedure pour initialiser les rocket-launchers rouges
to initRedHarvester
end

;; procedure pour initialiser les bases rouges
to initRedBase
  new-Harvester self
  set mem6 4
  set mem7 2
  set mem8 2
end
